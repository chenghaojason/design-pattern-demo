原型模式（Prototype Pattern）
定义：原型模式是一种对象创建型模式（复制对象），用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。
抽象原型类（Prototype）：是一个具有克隆自己的方法的接口，是多有具体原型类的公共父类，可以是抽象类也可以是接口。
具体原型类（ConcretePrototype）：具体原型类实现具体的克隆方法，在克隆方法中返回一个自己的克隆对象。
客户类（Client）：只需要实例化创建一个对象，再通过调用该对象的克隆方法复制得到读个相同的对象。
注意：
在使用原型模式进行克隆对象时，根据其成员对象是否也克隆，原型模式分为：深克隆和浅克隆。
浅克隆：
    被复制对象的所有普通成员变量具有和原来的对象相同的值，而其它成员对象的引用仍然指向原来的对象。也就是成员变量会被复制，而成员对象不会被复制。
    能够实现克隆（浅克隆）的Java类必须实现一个标识接口Cloneable，表示这个类支持复制。如果没有实现这个接口而调用clone()方法，则会抛出CloneNotSupportedException。
    在具体对象类中重写clone()方法，使其返回一个自己的对象。
深克隆：
    复制的对象的所有普通成员变量的值和原对象的普通成员变量的值一样，复制的对象的成员变量指向新的成员变量对象。
    也就是深克隆把要复制的对象所引用的对象都复制一遍。除了对象本身被复制外，对象中的引用对象也会被复制。
    要想实现深克隆，其原型对象类或者具体对象类只需实现表示接口Serializable，并通过的流的形式实现复制。