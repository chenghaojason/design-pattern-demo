适配器模式（Adapter Pattern）-结构型模式
定义：将一个接口转换成用户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作。
适配器模式分为：类适配器和对象适配器。
适配器模式包含如下四个角色：
1.目标抽象类(Target)：目标抽象类定义用户需要的接口，可以是接口、抽象类、特定类。在类适配器中由于不支持多继承，所以只能是接口。
2.适配者(Adaptee)：即被适配的角色，定义的是已经存在的接口方法，这个接口需要根据业务场景进行适配。一般是一个具体的类，包含用户希望使用的接口。
3.适配器类(Adapter)：对Targer和Adaptee进行适配。适配器类是适配器模式的核心。
    在类适配器模式中，它通过实现Target并继承Adaptee完成二者的关联关系。
    在对象适配器模式中，它通过继承Target并依赖Adaptee对象使二者完成关联关系。
4.客户类(Client)：在客户类中针对目标抽象类编程，调用目标抽象类中的业务方法。
另外还包括：缺省适配器模式、双向适配器模式。

优点：
将目标类和适配者类解耦，是系统具有更好的灵活性和扩展性，更换或新加适配器也非常方便，符合“开闭原则”。
（类适配器模式）由于适配器类是适配者类的子类，因此可以在适配器类中更换一些适配者中的方法，增加适配器的灵活性。
（对象适配器模式）对象适配器可以把多个不同的适配者适配到同一个目标。
缺点：
在类适配器模式中，适配器类在很多语言中不能同时适配多个适配者。
在对象适配器模式中，很难置换适配者类的方法。

使用场景：
1.系统需要使用现有的类，而这些类的接口不符合系统的需要。
2.想要建立一个可以重复使用的类，用于彼此之间没有太大关联的一些类可以一起工作。

